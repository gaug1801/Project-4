/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
/**
 *
 * @author bryanrivas
 */
public class RegUserFrame extends javax.swing.JFrame {
    
    public enum Modes {
        NEW,
        UPDATE
    }
    public Modes mode = Modes.NEW;
    public Connection connection;

    /**
     * Creates new form RegUserFrame
     */
    public RegUserFrame() {
        initComponents();
        refresh();
        mode = Modes.NEW;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RegUserList = new javax.swing.JList<>();
        userIDLabel = new javax.swing.JLabel();
        fNameLabel = new javax.swing.JLabel();
        lNameLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        playlistIDLabel = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Users");

        RegUserList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        RegUserList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                RegUserListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                RegUserListAncestorRemoved(evt);
            }
        });
        jScrollPane1.setViewportView(RegUserList);

        userIDLabel.setText("User ID");

        fNameLabel.setText("First Name");

        lNameLabel.setText("Last Name");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        newButton.setText("New");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        playlistIDLabel.setText("Song ID");

        jLabel2.setText("Playlist ID");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userIDLabel)
                            .addComponent(fNameLabel)
                            .addComponent(lNameLabel)
                            .addComponent(playlistIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)
                            .addComponent(jTextField4)
                            .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userIDLabel)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameLabel)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lNameLabel)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playlistIDLabel)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(deleteButton)
                    .addComponent(saveButton))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        // TODO add your handling code here:
        userIDLabel.setText("");
        fNameLabel.setText("");
        lNameLabel.setText("");
        mode = Modes.NEW;
        System.out.println("Mode: " + mode.toString());
    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        if (mode == RegUserFrame.Modes.UPDATE) {
            int id = 0;
            id = Integer.parseInt(userIDLabel.getText());

            try {
                if (connect()) {
                    String query = "Delete from artist where artist_id=?";
                    PreparedStatement stmnt = connection.prepareStatement(query);
                    stmnt.setInt(1, id);
                    int row = stmnt.executeUpdate();
                    System.out.println("Rows affected:" + row); //1
                    JOptionPane.showMessageDialog(new JFrame(), "Deleted User: " + id + " from the Database");
                    connection.close();
                } else {
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the database");
            }
        } else {
            JOptionPane.showMessageDialog(new JFrame(), "Error - Update mode not selected");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        int id = 0;
        int labelId = 0;
        
        try {
            id = Integer.parseInt(userIDLabel.getText());
            labelId =  Integer.parseInt(playlistIDLabel.getText());
            
            if ((checkId(id))) {
                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(new JFrame(), "Error - ID is not a number");
        }
        String _id = userIDLabel.getText();
        String user_fname = fNameLabel.getText();
        String user_lname = lNameLabel.getText();
        String _playlistID = playlistIDLabel.getText();
        System.out.println("Id: " + id);

        if (mode == Modes.NEW) {
            System.out.println("Save " + mode.toString() + " mode");
            if (checkId(id)) {
                JOptionPane.showMessageDialog(new JFrame(), "Error - ID or Record Label already exists. Choose new values.");
            } else {
                try {
                    if (connect()) {
                        String query = "Insert into artist (artist_id, artist_name, record_label_id)"
                                + "values(?, ?, ?)";
                        PreparedStatement stmnt = connection.prepareStatement(query);
                        stmnt.setInt(1, id);
                        stmnt.setString(2, user_fname);
                        stmnt.setString(3, user_lname);
                        stmnt.setInt(4, labelId);


                        int row = stmnt.executeUpdate();
                        System.out.println("Rows affected:" + row); //1
                        JOptionPane.showMessageDialog(new JFrame(), "Added User: " + id + " - " + user_fname + " " + user_lname + " " + _playlistID + " to the Database");
                        connection.close();
                    }
                } catch (Exception e) {
                    System.out.println(e);
                    JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the database");
                }

            }

        } else if (mode == Modes.UPDATE) {
            System.out.println("Save " + mode.toString() + " mode");
            
            try {
                if (connect()) {
                    String query = "Update artist set artist_name=? where artist_id=?";
                    PreparedStatement stmnt = connection.prepareStatement(query);

                    stmnt.setInt(2, id);
                    stmnt.setString(1, user_fname); //COME BACK TO
                             
                    int row = stmnt.executeUpdate();
                    System.out.println("Rows affected:" + row); //1
                    JOptionPane.showMessageDialog(new JFrame(), "Added User: " + id + " - " + user_fname + " " + user_lname + " " + _playlistID + " to the Database");
                    
                    connection.close();
                } else {
                }

            } catch (Exception e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(new JFrame(), "Error - could not connect to the database");
            }

        } else {
            System.out.println("No mode selected");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void RegUserListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_RegUserListAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_RegUserListAncestorAdded

    private void RegUserListAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_RegUserListAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_RegUserListAncestorRemoved

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void RegUserListValueChanged(javax.swing.event.ListSelectionEvent evt) {                                        
        int index = RegUserList.getSelectedIndex();
        System.out.println("Index Selected: " + index);
        String s = (String) RegUserList.getSelectedValue();
        System.out.println("Value Selected: " + s);
        String[] parts = s.split("-");
        String ID = parts[0].trim();
        System.out.println("ID: " + ID);
        updateform(ID);
        mode = Modes.UPDATE;
        System.out.println("Mode: " + mode.toString());

    } 
    
    private boolean connect() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/Team3Project", "root", "Anibal10");
            return true;
        } catch (Exception e) {
            System.out.println("Error - database could not connect\n" + e.getMessage());
            return false;
        }

    }
    
    private boolean checkLabel(int id) {
        try {
            if (connect()) {
                String query = "select * from users where playlist_id =" + id;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (!rs.next()) {
                    //no rows exist so return false;
                    connection.close();
                    return false;
                } else {
                    connection.close();
                    return true;
                }

            }
        } catch (Exception e) {
            System.out.println("Error connecting to the database\n" + e.getMessage());
            return true;
        }
        return true;
    }
    
    public void refresh() {
        try {
            if (connect()) {

                String query = "select * from users";

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                DefaultListModel listModel;
                listModel = new DefaultListModel();
                while (rs.next()) {
                    listModel.addElement(rs.getString("user_id") + " - " + rs.getString("user_fname") + ", " + rs.getString("user_lname") + ", " + rs.getString("song_id") + ", " + rs.getString("playlist_id")); //COME BACK?
                }
                RegUserList.setModel(listModel);

                connection.close();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }


    
    private boolean checkId(int id) {
        try {
            if (connect()) {
                String query = "select * from users where user_id =" + id;
                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                if (!rs.next()) {
                    //no rows exist so return false;
                    connection.close();
                    return false;
                } else {
                    connection.close();
                    return true;
                }

            }
        } catch (Exception e) {
            System.out.println("Error connecting to the database\n" + e.getMessage());
            return true;
        }
        return true;
    }
    
    public void updateform(String id) {
        try {
            if (connect()) {

                String query = "select * from users where user_id=" + id;

                Statement sta = connection.createStatement();
                ResultSet rs = sta.executeQuery(query);
                while (rs.next()) {
                    userIDLabel.setText(rs.getString("user_id"));
                    fNameLabel.setText(rs.getString("user_fname"));
                    lNameLabel.setText(rs.getString("user_lname"));
                    playlistIDLabel.setText(rs.getString("playlist_id"));
                    
                }

                connection.close();
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegUserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegUserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> RegUserList;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel fNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JLabel playlistIDLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel userIDLabel;
    // End of variables declaration//GEN-END:variables
}
